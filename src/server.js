// 必要なモジュールをインポートします。
// 環境変数を管理するためのモジュールdotenvを読み込んでいます。
// これにより、.envファイルに保存された環境変数をアプリケーション内で使用できるようにします。
const dotenv = require('dotenv'); // 環境変数を管理するためのモジュール
dotenv.config(); // .env ファイルを読み込み、環境変数をプロセスに設定


// アプリケーションのメインファイル（Expressアプリケーションなど）をインポートします。
// このファイルにはアプリケーションのルート設定やミドルウェアが含まれています。
const app = require('./app'); // アプリケーションのメインファイルをインポート


// データベース接続を設定するモジュールをインポートします。
// このモジュールには、データベースに接続するための設定が含まれています。
const connectDB = require('./config/db'); // データベース接続モジュールをインポート


// 設定ファイルからポート番号を取得します。
// 環境によってポート番号を変更したい場合に便利です。
const { port } = require('./config/config'); // 設定ファイルからポート番号を取得


// カスタムロガーをインポートして、サーバーの起動やエラーなどのログを管理します。
const logger = require('./logger'); // ログ出力を管理するカスタムロガーをインポート


/**
 * サーバーを開始するための非同期関数です。
 * 
 * この関数は次の手順でサーバーを起動します：
 * 1. データベースに接続
 * 2. 指定されたポートでアプリケーションをリッスン
 * 3. サーバー起動成功時にはログとコンソールにメッセージを表示
 * 4. エラー発生時にはエラーメッセージを出力し、プロセスを終了します。
 */
const startServer = async () => {
  try {
    // データベース接続を非同期で確立します。
    // データベース接続が成功すれば、次の処理に進みます。
    await connectDB(); // 非同期でデータベース接続を試みる

    // サーバーを指定されたポートでリッスン開始します。
    //「リッスン（listen）」は、コンピュータプログラムやサーバーが指定されたポート番号で待機し、外部からの接続を受け付ける状態になることを指します。
    //特に、Webアプリケーションにおいて、サーバーは「リッスン」しているポートに対して、
    //クライアント（ブラウザや他のアプリケーション）からのリクエストを待つことになります。

    app.listen(port, () => {
      // サーバーが正常に起動した場合、コンソールに起動メッセージを表示します。
      console.log(`Server is running on port ${port}`);
      
      // 同じメッセージをログにも記録します。
      logger.info(`Server is running on port ${port}`);
    });
  } catch (error) {
    // エラー発生時にはコンソールにエラーメッセージを表示します。
    // 例えば、データベース接続エラーなど。
    console.error('Error starting server:', error.message);

    // エラー発生時にはプロセスを終了します。
    // 異常終了ステータス1を返すことで、サーバーの起動に失敗したことを示します。
    process.exit(1);
  }
};


// サーバー起動処理を開始します。
// 非同期関数`startServer`を実行して、サーバーを立ち上げます。
startServer(); // 非同期関数を実行してサーバーを開始
